server.port: 8080
spring:
  application:
    name: test-microservice
  main:
    allow-bean-definition-overriding: true
  profiles:
    active: test
  cloud:
    config:
      uri: http://config-service.gestion.svc.cluster.local:8080
      #uri: http://localhost:8888
      enabled: true

  jackson.default-property-inclusion: NON_NULL

  #H2 Database
  h2:
    console:
      enabled: true
      path: /h2-console
#  flyway:
#    enabled: false
  flyway:
    enabled: true
    clean-disabled: true
    locations: classpath:db/migration
    table: flyway_schema_history
    baseline-on-migrate: true
    baseline-version: 1
    encoding: UTF-8
    out-of-order: false
    schemas: test
    validate-on-migrate: true
  datasource:
    platform: H2
    url: 'jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS test'
    username: sa
    password:
    driverClassName: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    generate-ddl: true
    show-sql: true
    hibernate:
      hbm2ddl:
        auto: validate
      default_schema: test
    properties:
      hibernate.dialect: org.hibernate.dialect.H2Dialect
  #APP SPECIFIC CUSTOM PROPERTIES
  #SPRING PROPERTIES
  kafka:
    bootstrap-servers: localhost:9200,localhost:9300,localhost:9400
    producer:
      retries: 0
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: consumer_group_id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

app:
  kafka:
    producer:
      topic: PRODUCER_TOPIC_NAME
    consumer:
      topic: CONSUMER_TOPIC_NAME_1
      
keycloak:
  realm: Test-bank
  auth-server-url: http://localhost:8086/auth
  resource: test-microservice
  # Keycloak Enable CORS
  cors: true
  enabled: true
  # Get the roles from the client and not from the realm
  use-resource-role-mappings: true
  cors-max-age: 0
  principal-attribute: preferred_username
  cors-allowed-methods: POST, PUT, DELETE, GET
  cors-allowed-headers: X-Requested-With, Content-Type, Authorization, Origin, Accept, Access-Control-Request-Method, Access-Control-Request-Headers
  bearer-only: true
  
junit.jupiter.testclass.order.default: org.junit.jupiter.api.ClassOrderer$OrderAnnotation